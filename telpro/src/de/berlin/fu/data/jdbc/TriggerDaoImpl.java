/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;

import de.berlin.fu.data.dao.TriggerDao;
import de.berlin.fu.data.dto.Trigger;
import de.berlin.fu.data.dto.TriggerPk;
import de.berlin.fu.data.exceptions.TriggerDaoException;

public class TriggerDaoImpl extends AbstractDAO implements TriggerDao {
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String SQL_SELECT = "SELECT idTrigger, PropertyType_idPropertyType, EventType_idEventType, TriggerType, Threshold FROM "
			+ getTableName() + "";

	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/**
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO "
			+ getTableName()
			+ " ( idTrigger, PropertyType_idPropertyType, EventType_idEventType, TriggerType, Threshold ) VALUES ( ?, ?, ?, ?, ? )";

	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE "
			+ getTableName()
			+ " SET idTrigger = ?, PropertyType_idPropertyType = ?, EventType_idEventType = ?, TriggerType = ?, Threshold = ? WHERE idTrigger = ?";

	/**
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName()
			+ " WHERE idTrigger = ?";

	/**
	 * Index of column idTrigger
	 */
	protected static final int COLUMN_ID_TRIGGER = 1;

	/**
	 * Index of column PropertyType_idPropertyType
	 */
	protected static final int COLUMN_PROPERTYTYPE_IDPROPERTYTYPE = 2;

	/**
	 * Index of column EventType_idEventType
	 */
	protected static final int COLUMN_EVENTTYPE_IDEVENTTYPE = 3;

	/**
	 * Index of column TriggerType
	 */
	protected static final int COLUMN_TRIGGER_TYPE = 4;

	/**
	 * Index of column Threshold
	 */
	protected static final int COLUMN_THRESHOLD = 5;

	/**
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 5;

	/**
	 * Index of primary-key column idTrigger
	 */
	protected static final int PK_COLUMN_ID_TRIGGER = 1;

	/**
	 * Inserts a new row in the Trigger table.
	 */
	public TriggerPk insert(Trigger dto) throws TriggerDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			stmt = conn.prepareStatement(SQL_INSERT);
			int index = 1;
			stmt.setInt(index++, dto.getIdTrigger());
			stmt.setInt(index++, dto.getPropertytypeIdpropertytype());
			stmt.setInt(index++, dto.getEventtypeIdeventtype());
			stmt.setInt(index++, dto.getTriggerType());
			stmt.setDouble(index++, dto.getThreshold());
			System.out.println("Executing " + SQL_INSERT + " with DTO: " + dto);
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
			reset(dto);
			return dto.createPk();
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new TriggerDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the Trigger table.
	 */
	public void update(TriggerPk pk, Trigger dto) throws TriggerDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			System.out.println("Executing " + SQL_UPDATE + " with DTO: " + dto);
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getIdTrigger());
			stmt.setInt(index++, dto.getPropertytypeIdpropertytype());
			stmt.setInt(index++, dto.getEventtypeIdeventtype());
			stmt.setInt(index++, dto.getTriggerType());
			stmt.setDouble(index++, dto.getThreshold());
			stmt.setInt(6, pk.getIdTrigger());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new TriggerDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the Trigger table.
	 */
	public void delete(TriggerPk pk) throws TriggerDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			System.out.println("Executing " + SQL_DELETE + " with PK: " + pk);
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getIdTrigger());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new TriggerDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the Trigger table that matches the specified
	 * primary-key value.
	 */
	public Trigger findByPrimaryKey(TriggerPk pk) throws TriggerDaoException {
		return findByPrimaryKey(pk.getIdTrigger());
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'idTrigger = :idTrigger'.
	 */
	public Trigger findByPrimaryKey(int idTrigger) throws TriggerDaoException {
		Trigger ret[] = findByDynamicSelect(
				SQL_SELECT + " WHERE idTrigger = ?",
				new Object[] { new Integer(idTrigger) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria ''.
	 */
	public Trigger[] findAll() throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY idTrigger", null);
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Trigger[] findByPropertyType(int propertytypeIdpropertytype)
			throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE PropertyType_idPropertyType = ?",
				new Object[] { new Integer(propertytypeIdpropertytype) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'EventType_idEventType = :eventtypeIdeventtype'.
	 */
	public Trigger[] findByEventType(int eventtypeIdeventtype)
			throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE EventType_idEventType = ?",
				new Object[] { new Integer(eventtypeIdeventtype) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'idTrigger = :idTrigger'.
	 */
	public Trigger[] findWhereIdTriggerEquals(int idTrigger)
			throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE idTrigger = ? ORDER BY idTrigger",
				new Object[] { new Integer(idTrigger) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Trigger[] findWherePropertytypeIdpropertytypeEquals(
			int propertytypeIdpropertytype) throws TriggerDaoException {
		return findByDynamicSelect(
				SQL_SELECT
						+ " WHERE PropertyType_idPropertyType = ? ORDER BY PropertyType_idPropertyType",
				new Object[] { new Integer(propertytypeIdpropertytype) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'EventType_idEventType = :eventtypeIdeventtype'.
	 */
	public Trigger[] findWhereEventtypeIdeventtypeEquals(
			int eventtypeIdeventtype) throws TriggerDaoException {
		return findByDynamicSelect(
				SQL_SELECT
						+ " WHERE EventType_idEventType = ? ORDER BY EventType_idEventType",
				new Object[] { new Integer(eventtypeIdeventtype) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'TriggerType = :triggerType'.
	 */
	public Trigger[] findWhereTriggerTypeEquals(int triggerType)
			throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE TriggerType = ? ORDER BY TriggerType",
				new Object[] { new Integer(triggerType) });
	}

	/**
	 * Returns all rows from the Trigger table that match the criteria
	 * 'Threshold = :threshold'.
	 */
	public Trigger[] findWhereThresholdEquals(double threshold)
			throws TriggerDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE Threshold = ? ORDER BY Threshold",
				new Object[] { new Double(threshold) });
	}

	/**
	 * Method 'TriggerDaoImpl'
	 * 
	 */
	public TriggerDaoImpl() {
	}

	/**
	 * Method 'TriggerDaoImpl'
	 * 
	 * @param userConn
	 */
	public TriggerDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "telpro.Trigger";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected Trigger fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()) {
			Trigger dto = new Trigger();
			populateDto(dto, rs);
			return dto;
		} else {
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected Trigger[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<Trigger> resultList = new ArrayList<Trigger>();
		while (rs.next()) {
			Trigger dto = new Trigger();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		Trigger ret[] = new Trigger[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Trigger dto, ResultSet rs) throws SQLException {
		dto.setIdTrigger(rs.getInt(COLUMN_ID_TRIGGER));
		dto.setPropertytypeIdpropertytype(rs
				.getInt(COLUMN_PROPERTYTYPE_IDPROPERTYTYPE));
		dto.setEventtypeIdeventtype(rs.getInt(COLUMN_EVENTTYPE_IDEVENTTYPE));
		dto.setTriggerType(rs.getInt(COLUMN_TRIGGER_TYPE));
		dto.setThreshold(rs.getDouble(COLUMN_THRESHOLD));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Trigger dto) {
	}

	/**
	 * Returns all rows from the Trigger table that match the specified
	 * arbitrary SQL statement
	 */
	public Trigger[] findByDynamicSelect(String sql, Object[] sqlParams)
			throws TriggerDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;

			System.out.println("Executing " + SQL);
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new TriggerDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the Trigger table that match the specified
	 * arbitrary SQL statement
	 */
	public Trigger[] findByDynamicWhere(String sql, Object[] sqlParams)
			throws TriggerDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;

			System.out.println("Executing " + SQL);
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new TriggerDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

}
