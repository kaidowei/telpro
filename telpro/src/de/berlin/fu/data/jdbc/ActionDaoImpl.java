/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;

import de.berlin.fu.data.dao.ActionDao;
import de.berlin.fu.data.dto.Action;
import de.berlin.fu.data.dto.ActionPk;
import de.berlin.fu.data.exceptions.ActionDaoException;

public class ActionDaoImpl extends AbstractDAO implements ActionDao {
	/**
	 * The factory class for this DAO has two versions of the create() method -
	 * one that takes no arguments and one that takes a Connection argument. If
	 * the Connection version is chosen then the connection will be stored in
	 * this attribute and will be used by all calls to this DAO, otherwise a new
	 * Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/**
	 * All finder methods in this class use this SELECT constant to build their
	 * queries
	 */
	protected final String SQL_SELECT = "SELECT idAction, Name, Description FROM "
			+ getTableName() + "";

	/**
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/**
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName()
			+ " ( idAction, Name, Description ) VALUES ( ?, ?, ? )";

	/**
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName()
			+ " SET idAction = ?, Name = ?, Description = ? WHERE idAction = ?";

	/**
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName()
			+ " WHERE idAction = ?";

	/**
	 * Index of column idAction
	 */
	protected static final int COLUMN_ID_ACTION = 1;

	/**
	 * Index of column Name
	 */
	protected static final int COLUMN_NAME = 2;

	/**
	 * Index of column Description
	 */
	protected static final int COLUMN_DESCRIPTION = 3;

	/**
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/**
	 * Index of primary-key column idAction
	 */
	protected static final int PK_COLUMN_ID_ACTION = 1;

	/**
	 * Inserts a new row in the Action table.
	 */
	public ActionPk insert(Action dto) throws ActionDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			stmt = conn.prepareStatement(SQL_INSERT,
					Statement.RETURN_GENERATED_KEYS);
			int index = 1;
			stmt.setInt(index++, dto.getIdAction());
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getDescription());
			System.out.println("Executing " + SQL_INSERT + " with DTO: " + dto);
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");

			// retrieve values from auto-increment columns
			rs = stmt.getGeneratedKeys();
			if (rs != null && rs.next()) {
				dto.setIdAction(rs.getInt(1));
			}

			reset(dto);
			return dto.createPk();
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new ActionDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Updates a single row in the Action table.
	 */
	public void update(ActionPk pk, Action dto) throws ActionDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			System.out.println("Executing " + SQL_UPDATE + " with DTO: " + dto);
			stmt = conn.prepareStatement(SQL_UPDATE);
			int index = 1;
			stmt.setInt(index++, dto.getIdAction());
			stmt.setString(index++, dto.getName());
			stmt.setString(index++, dto.getDescription());
			stmt.setInt(4, pk.getIdAction());
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new ActionDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Deletes a single row in the Action table.
	 */
	public void delete(ActionPk pk) throws ActionDaoException {
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			System.out.println("Executing " + SQL_DELETE + " with PK: " + pk);
			stmt = conn.prepareStatement(SQL_DELETE);
			stmt.setInt(1, pk.getIdAction());
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println(rows + " rows affected (" + (t2 - t1) + " ms)");
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new ActionDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns the rows from the Action table that matches the specified
	 * primary-key value.
	 */
	public Action findByPrimaryKey(ActionPk pk) throws ActionDaoException {
		return findByPrimaryKey(pk.getIdAction());
	}

	/**
	 * Returns all rows from the Action table that match the criteria 'idAction
	 * = :idAction'.
	 */
	public Action findByPrimaryKey(int idAction) throws ActionDaoException {
		Action ret[] = findByDynamicSelect(SQL_SELECT + " WHERE idAction = ?",
				new Object[] { Integer.valueOf(idAction) });
		return ret.length == 0 ? null : ret[0];
	}

	/**
	 * Returns all rows from the Action table that match the criteria ''.
	 */
	public Action[] findAll() throws ActionDaoException {
		return findByDynamicSelect(SQL_SELECT + " ORDER BY idAction", null);
	}

	/**
	 * Returns all rows from the Action table that match the criteria 'idAction
	 * = :idAction'.
	 */
	public Action[] findWhereIdActionEquals(int idAction)
			throws ActionDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE idAction = ? ORDER BY idAction",
				new Object[] { Integer.valueOf(idAction) });
	}

	/**
	 * Returns all rows from the Action table that match the criteria 'Name =
	 * :name'.
	 */
	public Action[] findWhereNameEquals(String name) throws ActionDaoException {
		return findByDynamicSelect(
				SQL_SELECT + " WHERE Name = ? ORDER BY Name",
				new Object[] { name });
	}

	/**
	 * Returns all rows from the Action table that match the criteria
	 * 'Description = :description'.
	 */
	public Action[] findWhereDescriptionEquals(String description)
			throws ActionDaoException {
		return findByDynamicSelect(SQL_SELECT
				+ " WHERE Description = ? ORDER BY Description",
				new Object[] { description });
	}

	/**
	 * Method 'ActionDaoImpl'
	 * 
	 */
	public ActionDaoImpl() {
	}

	/**
	 * Method 'ActionDaoImpl'
	 * 
	 * @param userConn
	 */
	public ActionDaoImpl(final java.sql.Connection userConn) {
		this.userConn = userConn;
	}

	/**
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows) {
		this.maxRows = maxRows;
	}

	/**
	 * Gets the value of maxRows
	 */
	public int getMaxRows() {
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName() {
		return "telpro.Action";
	}

	/**
	 * Fetches a single row from the result set
	 */
	protected Action fetchSingleResult(ResultSet rs) throws SQLException {
		if (rs.next()) {
			Action dto = new Action();
			populateDto(dto, rs);
			return dto;
		} else {
			return null;
		}

	}

	/**
	 * Fetches multiple rows from the result set
	 */
	protected Action[] fetchMultiResults(ResultSet rs) throws SQLException {
		Collection<Action> resultList = new ArrayList<Action>();
		while (rs.next()) {
			Action dto = new Action();
			populateDto(dto, rs);
			resultList.add(dto);
		}

		Action ret[] = new Action[resultList.size()];
		resultList.toArray(ret);
		return ret;
	}

	/**
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Action dto, ResultSet rs) throws SQLException {
		dto.setIdAction(rs.getInt(COLUMN_ID_ACTION));
		dto.setName(rs.getString(COLUMN_NAME));
		dto.setDescription(rs.getString(COLUMN_DESCRIPTION));
	}

	/**
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Action dto) {
	}

	/**
	 * Returns all rows from the Action table that match the specified arbitrary
	 * SQL statement
	 */
	public Action[] findByDynamicSelect(String sql, Object[] sqlParams)
			throws ActionDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = sql;

			System.out.println("Executing " + SQL);
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new ActionDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

	/**
	 * Returns all rows from the Action table that match the specified arbitrary
	 * SQL statement
	 */
	public Action[] findByDynamicWhere(String sql, Object[] sqlParams)
			throws ActionDaoException {
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;

		try {
			// get the user-specified connection or get a connection from the
			// ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();

			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;

			System.out.println("Executing " + SQL);
			// prepare statement
			stmt = conn.prepareStatement(SQL);
			stmt.setMaxRows(maxRows);

			// bind parameters
			for (int i = 0; sqlParams != null && i < sqlParams.length; i++) {
				stmt.setObject(i + 1, sqlParams[i]);
			}

			rs = stmt.executeQuery();

			// fetch the results
			return fetchMultiResults(rs);
		} catch (Exception _e) {
			_e.printStackTrace();
			throw new ActionDaoException("Exception: " + _e.getMessage(), _e);
		} finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}

		}

	}

}
