/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dto;

import java.io.Serializable;
import java.util.Date;

public class Event implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 5375115859392724284L;

	/**
	 * This attribute maps to the column idEvent in the Event table.
	 */
	protected int idEvent;

	/**
	 * This attribute maps to the column EventType_idEventType in the Event
	 * table.
	 */
	protected int eventtypeIdeventtype;

	/**
	 * This attribute maps to the column Timestamp in the Event table.
	 */
	protected Date timestamp;

	/**
	 * This attribute maps to the column Sensor_idSensor in the Event table.
	 */
	protected String sensorIdsensor;

	/**
	 * This attribute maps to the column Trigger_idTrigger in the Event table.
	 */
	protected int triggerIdtrigger;

	/**
	 * This attribute represents whether the primitive attribute
	 * triggerIdtrigger is null.
	 */
	protected boolean triggerIdtriggerNull = true;

	/**
	 * Method 'Event'
	 * 
	 */
	public Event() {
	}

	/**
	 * Method 'getIdEvent'
	 * 
	 * @return int
	 */
	public int getIdEvent() {
		return idEvent;
	}

	/**
	 * Method 'setIdEvent'
	 * 
	 * @param idEvent
	 */
	public void setIdEvent(int idEvent) {
		this.idEvent = idEvent;
	}

	/**
	 * Method 'getEventtypeIdeventtype'
	 * 
	 * @return int
	 */
	public int getEventtypeIdeventtype() {
		return eventtypeIdeventtype;
	}

	/**
	 * Method 'setEventtypeIdeventtype'
	 * 
	 * @param eventtypeIdeventtype
	 */
	public void setEventtypeIdeventtype(int eventtypeIdeventtype) {
		this.eventtypeIdeventtype = eventtypeIdeventtype;
	}

	/**
	 * Method 'getTimestamp'
	 * 
	 * @return Date
	 */
	public Date getTimestamp() {
		return timestamp;
	}

	/**
	 * Method 'setTimestamp'
	 * 
	 * @param timestamp
	 */
	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	/**
	 * Method 'getSensorIdsensor'
	 * 
	 * @return String
	 */
	public String getSensorIdsensor() {
		return sensorIdsensor;
	}

	/**
	 * Method 'setSensorIdsensor'
	 * 
	 * @param sensorIdsensor
	 */
	public void setSensorIdsensor(String sensorIdsensor) {
		this.sensorIdsensor = sensorIdsensor;
	}

	/**
	 * Method 'getTriggerIdtrigger'
	 * 
	 * @return int
	 */
	public int getTriggerIdtrigger() {
		return triggerIdtrigger;
	}

	/**
	 * Method 'setTriggerIdtrigger'
	 * 
	 * @param triggerIdtrigger
	 */
	public void setTriggerIdtrigger(int triggerIdtrigger) {
		this.triggerIdtrigger = triggerIdtrigger;
		this.triggerIdtriggerNull = false;
	}

	/**
	 * Method 'setTriggerIdtriggerNull'
	 * 
	 * @param value
	 */
	public void setTriggerIdtriggerNull(boolean value) {
		this.triggerIdtriggerNull = value;
	}

	/**
	 * Method 'isTriggerIdtriggerNull'
	 * 
	 * @return boolean
	 */
	public boolean isTriggerIdtriggerNull() {
		return triggerIdtriggerNull;
	}

	/**
	 * Method 'equals'
	 * 
	 * @param _other
	 * @return boolean
	 */
	public boolean equals(Object _other) {
		if (_other == null) {
			return false;
		}

		if (_other == this) {
			return true;
		}

		if (!(_other instanceof Event)) {
			return false;
		}

		final Event _cast = (Event) _other;
		if (idEvent != _cast.idEvent) {
			return false;
		}

		if (eventtypeIdeventtype != _cast.eventtypeIdeventtype) {
			return false;
		}

		if (timestamp == null ? _cast.timestamp != timestamp : !timestamp
				.equals(_cast.timestamp)) {
			return false;
		}

		if (sensorIdsensor == null ? _cast.sensorIdsensor != sensorIdsensor
				: !sensorIdsensor.equals(_cast.sensorIdsensor)) {
			return false;
		}

		if (triggerIdtrigger != _cast.triggerIdtrigger) {
			return false;
		}

		if (triggerIdtriggerNull != _cast.triggerIdtriggerNull) {
			return false;
		}

		return true;
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 */
	public int hashCode() {
		int _hashCode = 0;
		_hashCode = 29 * _hashCode + idEvent;
		_hashCode = 29 * _hashCode + eventtypeIdeventtype;
		if (timestamp != null) {
			_hashCode = 29 * _hashCode + timestamp.hashCode();
		}

		if (sensorIdsensor != null) {
			_hashCode = 29 * _hashCode + sensorIdsensor.hashCode();
		}

		_hashCode = 29 * _hashCode + triggerIdtrigger;
		_hashCode = 29 * _hashCode + (triggerIdtriggerNull ? 1 : 0);
		return _hashCode;
	}

	/**
	 * Method 'createPk'
	 * 
	 * @return EventPk
	 */
	public EventPk createPk() {
		return new EventPk(idEvent, eventtypeIdeventtype);
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	public String toString() {
		StringBuffer ret = new StringBuffer();
		ret.append("de.berlin.fu.data.dto.Event: ");
		ret.append("idEvent=" + idEvent);
		ret.append(", eventtypeIdeventtype=" + eventtypeIdeventtype);
		ret.append(", timestamp=" + timestamp);
		ret.append(", sensorIdsensor=" + sensorIdsensor);
		ret.append(", triggerIdtrigger=" + triggerIdtrigger);
		return ret.toString();
	}

}
