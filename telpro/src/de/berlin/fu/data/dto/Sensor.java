/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dto;

import java.io.Serializable;

public class Sensor implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -6446184005235445168L;

	/**
	 * This attribute maps to the column idSensor in the Sensor table.
	 */
	protected String idSensor;

	/**
	 * This attribute maps to the column IP in the Sensor table.
	 */
	protected int ip;

	/**
	 * This attribute represents whether the primitive attribute ip is null.
	 */
	protected boolean ipNull = true;

	/**
	 * This attribute maps to the column Location in the Sensor table.
	 */
	protected String location;

	/**
	 * Method 'Sensor'
	 * 
	 */
	public Sensor() {
	}

	/**
	 * Method 'getIdSensor'
	 * 
	 * @return String
	 */
	public String getIdSensor() {
		return idSensor;
	}

	/**
	 * Method 'setIdSensor'
	 * 
	 * @param idSensor
	 */
	public void setIdSensor(String idSensor) {
		this.idSensor = idSensor;
	}

	private static int ipToInt(String addr) {
		String[] addrArray = addr.split("\\.");

		int num = 0;

		for (int i = 0; i < addrArray.length; i++) {
			int power = 3 - i;
			num += ((Integer.parseInt(addrArray[i]) % 256 * Math
					.pow(256, power)));
		}
		return num;
	}

	private static String intToIp(int i) {
		return ((i >> 24) & 0xFF) + "." + ((i >> 16) & 0xFF) + "."
				+ ((i >> 8) & 0xFF) + "." + (i & 0xFF);
	}

	/**
	 * Method 'getIp'
	 * 
	 * @return int
	 */
	public int getIp() {
		return ip;
	}

	/**
	 * Method 'getIp'
	 * 
	 * @return String
	 */
	public String getIpString() {
		return intToIp(ip);
	}

	/**
	 * Method 'setIp'
	 * 
	 * @param ip
	 */
	public void setIp(int ip) {
		this.ip = ip;
		this.ipNull = false;
	}

	/**
	 * Method 'setIp'
	 * 
	 * @param ip
	 */
	public void setIp(String ip) {
		this.ip = ipToInt(ip);
		this.ipNull = false;
	}

	/**
	 * Method 'setIpNull'
	 * 
	 * @param value
	 */
	public void setIpNull(boolean value) {
		this.ipNull = value;
	}

	/**
	 * Method 'isIpNull'
	 * 
	 * @return boolean
	 */
	public boolean isIpNull() {
		return ipNull;
	}

	/**
	 * Method 'getLocation'
	 * 
	 * @return String
	 */
	public String getLocation() {
		return location;
	}

	/**
	 * Method 'setLocation'
	 * 
	 * @param location
	 */
	public void setLocation(String location) {
		this.location = location;
	}

	/**
	 * Method 'equals'
	 * 
	 * @param _other
	 * @return boolean
	 */
	@Override
	public boolean equals(Object _other) {
		if (_other == null) {
			return false;
		}

		if (_other == this) {
			return true;
		}

		if (!(_other instanceof Sensor)) {
			return false;
		}

		final Sensor _cast = (Sensor) _other;
		if (idSensor == null ? _cast.idSensor != idSensor : !idSensor
				.equals(_cast.idSensor)) {
			return false;
		}

		if (ip != _cast.ip) {
			return false;
		}

		if (ipNull != _cast.ipNull) {
			return false;
		}

		if (location == null ? _cast.location != location : !location
				.equals(_cast.location)) {
			return false;
		}

		return true;
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 */
	@Override
	public int hashCode() {
		int _hashCode = 0;
		if (idSensor != null) {
			_hashCode = 29 * _hashCode + idSensor.hashCode();
		}

		_hashCode = 29 * _hashCode + ip;
		_hashCode = 29 * _hashCode + (ipNull ? 1 : 0);
		if (location != null) {
			_hashCode = 29 * _hashCode + location.hashCode();
		}

		return _hashCode;
	}

	/**
	 * Method 'createPk'
	 * 
	 * @return SensorPk
	 */
	public SensorPk createPk() {
		return new SensorPk(idSensor);
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	@Override
	public String toString() {
		StringBuffer ret = new StringBuffer();
		ret.append("de.berlin.fu.data.dto.Sensor: ");
		ret.append("idSensor=" + idSensor);
		ret.append(", ip=" + ip);
		ret.append(", location=" + location);
		return ret.toString();
	}

}
