/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dto;

import java.io.Serializable;

public class Trigger implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 7821470226583573369L;

	/**
	 * This attribute maps to the column idTrigger in the Trigger table.
	 */
	protected int idTrigger;

	/**
	 * This attribute maps to the column PropertyType_idPropertyType in the
	 * Trigger table.
	 */
	protected int propertytypeIdpropertytype;

	/**
	 * This attribute maps to the column EventType_idEventType in the Trigger
	 * table.
	 */
	protected int eventtypeIdeventtype;

	/**
	 * This attribute maps to the column TriggerType in the Trigger table.
	 */
	protected int triggerType;

	/**
	 * This attribute maps to the column Threshold in the Trigger table.
	 */
	protected double threshold;

	/**
	 * Method 'Trigger'
	 * 
	 */
	public Trigger() {
	}

	/**
	 * Method 'getIdTrigger'
	 * 
	 * @return int
	 */
	public int getIdTrigger() {
		return idTrigger;
	}

	/**
	 * Method 'setIdTrigger'
	 * 
	 * @param idTrigger
	 */
	public void setIdTrigger(int idTrigger) {
		this.idTrigger = idTrigger;
	}

	/**
	 * Method 'getPropertytypeIdpropertytype'
	 * 
	 * @return int
	 */
	public int getPropertytypeIdpropertytype() {
		return propertytypeIdpropertytype;
	}

	/**
	 * Method 'setPropertytypeIdpropertytype'
	 * 
	 * @param propertytypeIdpropertytype
	 */
	public void setPropertytypeIdpropertytype(int propertytypeIdpropertytype) {
		this.propertytypeIdpropertytype = propertytypeIdpropertytype;
	}

	/**
	 * Method 'getEventtypeIdeventtype'
	 * 
	 * @return int
	 */
	public int getEventtypeIdeventtype() {
		return eventtypeIdeventtype;
	}

	/**
	 * Method 'setEventtypeIdeventtype'
	 * 
	 * @param eventtypeIdeventtype
	 */
	public void setEventtypeIdeventtype(int eventtypeIdeventtype) {
		this.eventtypeIdeventtype = eventtypeIdeventtype;
	}

	/**
	 * Method 'getTriggerType'
	 * 
	 * @return int
	 */
	public int getTriggerType() {
		return triggerType;
	}

	/**
	 * Method 'setTriggerType'
	 * 
	 * @param triggerType
	 */
	public void setTriggerType(int triggerType) {
		this.triggerType = triggerType;
	}

	/**
	 * Method 'getThreshold'
	 * 
	 * @return double
	 */
	public double getThreshold() {
		return threshold;
	}

	/**
	 * Method 'setThreshold'
	 * 
	 * @param threshold
	 */
	public void setThreshold(double threshold) {
		this.threshold = threshold;
	}

	/**
	 * Method 'equals'
	 * 
	 * @param _other
	 * @return boolean
	 */
	@Override
	public boolean equals(Object _other) {
		if (_other == null) {
			return false;
		}

		if (_other == this) {
			return true;
		}

		if (!(_other instanceof Trigger)) {
			return false;
		}

		final Trigger _cast = (Trigger) _other;
		if (idTrigger != _cast.idTrigger) {
			return false;
		}

		if (propertytypeIdpropertytype != _cast.propertytypeIdpropertytype) {
			return false;
		}

		if (eventtypeIdeventtype != _cast.eventtypeIdeventtype) {
			return false;
		}

		if (triggerType != _cast.triggerType) {
			return false;
		}

		if (threshold != _cast.threshold) {
			return false;
		}

		return true;
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 */
	@Override
	public int hashCode() {
		int _hashCode = 0;
		_hashCode = 29 * _hashCode + idTrigger;
		_hashCode = 29 * _hashCode + propertytypeIdpropertytype;
		_hashCode = 29 * _hashCode + eventtypeIdeventtype;
		_hashCode = 29 * _hashCode + triggerType;
		// TODO hotfix
		// long temp_threshold = Double.doubleToLongBits(threshold);
		long temp_threshold = Long.valueOf(String.valueOf(threshold));

		_hashCode = 29 * _hashCode
				+ (int) (temp_threshold ^ (temp_threshold >>> 32));
		return _hashCode;
	}

	/**
	 * Method 'createPk'
	 * 
	 * @return TriggerPk
	 */
	public TriggerPk createPk() {
		return new TriggerPk(idTrigger);
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	@Override
	public String toString() {
		StringBuffer ret = new StringBuffer();
		ret.append("de.berlin.fu.data.dto.Trigger: ");
		ret.append("idTrigger=" + idTrigger);
		ret.append(", propertytypeIdpropertytype=" + propertytypeIdpropertytype);
		ret.append(", eventtypeIdeventtype=" + eventtypeIdeventtype);
		ret.append(", triggerType=" + triggerType);
		ret.append(", threshold=" + threshold);
		return ret.toString();
	}

}
