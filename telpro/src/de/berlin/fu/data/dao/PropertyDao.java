/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import java.util.Date;
import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface PropertyDao
{
	/** 
	 * Inserts a new row in the Property table.
	 */
	public PropertyPk insert(Property dto) throws PropertyDaoException;

	/** 
	 * Updates a single row in the Property table.
	 */
	public void update(PropertyPk pk, Property dto) throws PropertyDaoException;

	/** 
	 * Deletes a single row in the Property table.
	 */
	public void delete(PropertyPk pk) throws PropertyDaoException;

	/** 
	 * Returns the rows from the Property table that matches the specified primary-key value.
	 */
	public Property findByPrimaryKey(PropertyPk pk) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'idProperty = :idProperty AND PropertyType_idPropertyType = :propertytypeIdpropertytype AND Sensor_idSensor = :sensorIdsensor'.
	 */
	public Property findByPrimaryKey(int idProperty, int propertytypeIdpropertytype, String sensorIdsensor) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria ''.
	 */
	public Property[] findAll() throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Property[] findByPropertyType(int propertytypeIdpropertytype) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'Sensor_idSensor = :sensorIdsensor'.
	 */
	public Property[] findBySensor(String sensorIdsensor) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'idProperty = :idProperty'.
	 */
	public Property[] findWhereIdPropertyEquals(int idProperty) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Property[] findWherePropertytypeIdpropertytypeEquals(int propertytypeIdpropertytype) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'Sensor_idSensor = :sensorIdsensor'.
	 */
	public Property[] findWhereSensorIdsensorEquals(String sensorIdsensor) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'Value = :value'.
	 */
	public Property[] findWhereValueEquals(double value) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the criteria 'Timestamp = :timestamp'.
	 */
	public Property[] findWhereTimestampEquals(Date timestamp) throws PropertyDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Property table that match the specified arbitrary SQL statement
	 */
	public Property[] findByDynamicSelect(String sql, Object[] sqlParams) throws PropertyDaoException;

	/** 
	 * Returns all rows from the Property table that match the specified arbitrary SQL statement
	 */
	public Property[] findByDynamicWhere(String sql, Object[] sqlParams) throws PropertyDaoException;

}
