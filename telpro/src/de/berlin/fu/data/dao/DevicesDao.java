/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface DevicesDao
{
	/** 
	 * Inserts a new row in the Devices table.
	 */
	public DevicesPk insert(Devices dto) throws DevicesDaoException;

	/** 
	 * Updates a single row in the Devices table.
	 */
	public void update(DevicesPk pk, Devices dto) throws DevicesDaoException;

	/** 
	 * Deletes a single row in the Devices table.
	 */
	public void delete(DevicesPk pk) throws DevicesDaoException;

	/** 
	 * Returns the rows from the Devices table that matches the specified primary-key value.
	 */
	public Devices findByPrimaryKey(DevicesPk pk) throws DevicesDaoException;

	/** 
	 * Returns all rows from the Devices table that match the criteria 'idDevices = :idDevices'.
	 */
	public Devices findByPrimaryKey(int idDevices) throws DevicesDaoException;

	/** 
	 * Returns all rows from the Devices table that match the criteria ''.
	 */
	public Devices[] findAll() throws DevicesDaoException;

	/** 
	 * Returns all rows from the Devices table that match the criteria 'idDevices = :idDevices'.
	 */
	public Devices[] findWhereIdDevicesEquals(int idDevices) throws DevicesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Devices table that match the specified arbitrary SQL statement
	 */
	public Devices[] findByDynamicSelect(String sql, Object[] sqlParams) throws DevicesDaoException;

	/** 
	 * Returns all rows from the Devices table that match the specified arbitrary SQL statement
	 */
	public Devices[] findByDynamicWhere(String sql, Object[] sqlParams) throws DevicesDaoException;

}
