/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface SensorDao
{
	/** 
	 * Inserts a new row in the Sensor table.
	 */
	public SensorPk insert(Sensor dto) throws SensorDaoException;

	/** 
	 * Updates a single row in the Sensor table.
	 */
	public void update(SensorPk pk, Sensor dto) throws SensorDaoException;

	/** 
	 * Deletes a single row in the Sensor table.
	 */
	public void delete(SensorPk pk) throws SensorDaoException;

	/** 
	 * Returns the rows from the Sensor table that matches the specified primary-key value.
	 */
	public Sensor findByPrimaryKey(SensorPk pk) throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the criteria 'idSensor = :idSensor'.
	 */
	public Sensor findByPrimaryKey(String idSensor) throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the criteria ''.
	 */
	public Sensor[] findAll() throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the criteria 'idSensor = :idSensor'.
	 */
	public Sensor[] findWhereIdSensorEquals(String idSensor) throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the criteria 'IP = :ip'.
	 */
	public Sensor[] findWhereIpEquals(int ip) throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the criteria 'Location = :location'.
	 */
	public Sensor[] findWhereLocationEquals(String location) throws SensorDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Sensor table that match the specified arbitrary SQL statement
	 */
	public Sensor[] findByDynamicSelect(String sql, Object[] sqlParams) throws SensorDaoException;

	/** 
	 * Returns all rows from the Sensor table that match the specified arbitrary SQL statement
	 */
	public Sensor[] findByDynamicWhere(String sql, Object[] sqlParams) throws SensorDaoException;

}
