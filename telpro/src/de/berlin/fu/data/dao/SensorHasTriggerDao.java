/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface SensorHasTriggerDao
{
	/** 
	 * Inserts a new row in the Sensor_has_Trigger table.
	 */
	public SensorHasTriggerPk insert(SensorHasTrigger dto) throws SensorHasTriggerDaoException;

	/** 
	 * Updates a single row in the Sensor_has_Trigger table.
	 */
	public void update(SensorHasTriggerPk pk, SensorHasTrigger dto) throws SensorHasTriggerDaoException;

	/** 
	 * Deletes a single row in the Sensor_has_Trigger table.
	 */
	public void delete(SensorHasTriggerPk pk) throws SensorHasTriggerDaoException;

	/** 
	 * Returns the rows from the Sensor_has_Trigger table that matches the specified primary-key value.
	 */
	public SensorHasTrigger findByPrimaryKey(SensorHasTriggerPk pk) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria 'Sensor_idSensor = :sensorIdsensor AND Trigger_idTrigger = :triggerIdtrigger'.
	 */
	public SensorHasTrigger findByPrimaryKey(String sensorIdsensor, int triggerIdtrigger) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria ''.
	 */
	public SensorHasTrigger[] findAll() throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria 'Sensor_idSensor = :sensorIdsensor'.
	 */
	public SensorHasTrigger[] findBySensor(String sensorIdsensor) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria 'Trigger_idTrigger = :triggerIdtrigger'.
	 */
	public SensorHasTrigger[] findByTrigger(int triggerIdtrigger) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria 'Sensor_idSensor = :sensorIdsensor'.
	 */
	public SensorHasTrigger[] findWhereSensorIdsensorEquals(String sensorIdsensor) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the criteria 'Trigger_idTrigger = :triggerIdtrigger'.
	 */
	public SensorHasTrigger[] findWhereTriggerIdtriggerEquals(int triggerIdtrigger) throws SensorHasTriggerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the specified arbitrary SQL statement
	 */
	public SensorHasTrigger[] findByDynamicSelect(String sql, Object[] sqlParams) throws SensorHasTriggerDaoException;

	/** 
	 * Returns all rows from the Sensor_has_Trigger table that match the specified arbitrary SQL statement
	 */
	public SensorHasTrigger[] findByDynamicWhere(String sql, Object[] sqlParams) throws SensorHasTriggerDaoException;

}
