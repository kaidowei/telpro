/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface TriggerDao
{
	/** 
	 * Inserts a new row in the Trigger table.
	 */
	public TriggerPk insert(Trigger dto) throws TriggerDaoException;

	/** 
	 * Updates a single row in the Trigger table.
	 */
	public void update(TriggerPk pk, Trigger dto) throws TriggerDaoException;

	/** 
	 * Deletes a single row in the Trigger table.
	 */
	public void delete(TriggerPk pk) throws TriggerDaoException;

	/** 
	 * Returns the rows from the Trigger table that matches the specified primary-key value.
	 */
	public Trigger findByPrimaryKey(TriggerPk pk) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'idTrigger = :idTrigger'.
	 */
	public Trigger findByPrimaryKey(int idTrigger) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria ''.
	 */
	public Trigger[] findAll() throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'EventType_idEventType = :eventtypeIdeventtype'.
	 */
	public Trigger[] findByEventType(int eventtypeIdeventtype) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Trigger[] findByPropertyType(int propertytypeIdpropertytype) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'idTrigger = :idTrigger'.
	 */
	public Trigger[] findWhereIdTriggerEquals(int idTrigger) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'PropertyType_idPropertyType = :propertytypeIdpropertytype'.
	 */
	public Trigger[] findWherePropertytypeIdpropertytypeEquals(int propertytypeIdpropertytype) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the criteria 'EventType_idEventType = :eventtypeIdeventtype'.
	 */
	public Trigger[] findWhereEventtypeIdeventtypeEquals(int eventtypeIdeventtype) throws TriggerDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the Trigger table that match the specified arbitrary SQL statement
	 */
	public Trigger[] findByDynamicSelect(String sql, Object[] sqlParams) throws TriggerDaoException;

	/** 
	 * Returns all rows from the Trigger table that match the specified arbitrary SQL statement
	 */
	public Trigger[] findByDynamicWhere(String sql, Object[] sqlParams) throws TriggerDaoException;

}
