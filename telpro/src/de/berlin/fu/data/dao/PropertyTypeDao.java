/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.dao;

import de.berlin.fu.data.dto.*;
import de.berlin.fu.data.exceptions.*;

public interface PropertyTypeDao
{
	/** 
	 * Inserts a new row in the PropertyType table.
	 */
	public PropertyTypePk insert(PropertyType dto) throws PropertyTypeDaoException;

	/** 
	 * Updates a single row in the PropertyType table.
	 */
	public void update(PropertyTypePk pk, PropertyType dto) throws PropertyTypeDaoException;

	/** 
	 * Deletes a single row in the PropertyType table.
	 */
	public void delete(PropertyTypePk pk) throws PropertyTypeDaoException;

	/** 
	 * Returns the rows from the PropertyType table that matches the specified primary-key value.
	 */
	public PropertyType findByPrimaryKey(PropertyTypePk pk) throws PropertyTypeDaoException;

	/** 
	 * Returns all rows from the PropertyType table that match the criteria 'idPropertyType = :idPropertyType'.
	 */
	public PropertyType findByPrimaryKey(int idPropertyType) throws PropertyTypeDaoException;

	/** 
	 * Returns all rows from the PropertyType table that match the criteria ''.
	 */
	public PropertyType[] findAll() throws PropertyTypeDaoException;

	/** 
	 * Returns all rows from the PropertyType table that match the criteria 'idPropertyType = :idPropertyType'.
	 */
	public PropertyType[] findWhereIdPropertyTypeEquals(int idPropertyType) throws PropertyTypeDaoException;

	/** 
	 * Returns all rows from the PropertyType table that match the criteria 'Name = :name'.
	 */
	public PropertyType[] findWhereNameEquals(String name) throws PropertyTypeDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the PropertyType table that match the specified arbitrary SQL statement
	 */
	public PropertyType[] findByDynamicSelect(String sql, Object[] sqlParams) throws PropertyTypeDaoException;

	/** 
	 * Returns all rows from the PropertyType table that match the specified arbitrary SQL statement
	 */
	public PropertyType[] findByDynamicWhere(String sql, Object[] sqlParams) throws PropertyTypeDaoException;

}
