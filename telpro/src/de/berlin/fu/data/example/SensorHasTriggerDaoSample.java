/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import de.berlin.fu.data.dao.SensorHasTriggerDao;
import de.berlin.fu.data.dto.SensorHasTrigger;
import de.berlin.fu.data.exceptions.SensorHasTriggerDaoException;
import de.berlin.fu.data.factory.SensorHasTriggerDaoFactory;

public class SensorHasTriggerDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findBySensor("");
		// findByTrigger(0);
		// findWhereSensorIdsensorEquals("");
		// findWhereTriggerIdtriggerEquals(0);
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			SensorHasTriggerDao _dao = getSensorHasTriggerDao();
			SensorHasTrigger _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findBySensor'
	 * 
	 * @param sensorIdsensor
	 */
	public static void findBySensor(String sensorIdsensor)
	{
		try {
			SensorHasTriggerDao _dao = getSensorHasTriggerDao();
			SensorHasTrigger _result[] = _dao.findBySensor(sensorIdsensor);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByTrigger'
	 * 
	 * @param triggerIdtrigger
	 */
	public static void findByTrigger(int triggerIdtrigger)
	{
		try {
			SensorHasTriggerDao _dao = getSensorHasTriggerDao();
			SensorHasTrigger _result[] = _dao.findByTrigger(triggerIdtrigger);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereSensorIdsensorEquals'
	 * 
	 * @param sensorIdsensor
	 */
	public static void findWhereSensorIdsensorEquals(String sensorIdsensor)
	{
		try {
			SensorHasTriggerDao _dao = getSensorHasTriggerDao();
			SensorHasTrigger _result[] = _dao.findWhereSensorIdsensorEquals(sensorIdsensor);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereTriggerIdtriggerEquals'
	 * 
	 * @param triggerIdtrigger
	 */
	public static void findWhereTriggerIdtriggerEquals(int triggerIdtrigger)
	{
		try {
			SensorHasTriggerDao _dao = getSensorHasTriggerDao();
			SensorHasTrigger _result[] = _dao.findWhereTriggerIdtriggerEquals(triggerIdtrigger);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getSensorHasTriggerDao'
	 * 
	 * @return SensorHasTriggerDao
	 */
	public static SensorHasTriggerDao getSensorHasTriggerDao()
	{
		return SensorHasTriggerDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(SensorHasTrigger dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getSensorIdsensor() );
		buf.append( ", " );
		buf.append( dto.getTriggerIdtrigger() );
		System.out.println( buf.toString() );
	}

}
