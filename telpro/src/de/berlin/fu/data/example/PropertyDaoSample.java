/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package de.berlin.fu.data.example;

import java.math.*;
import java.util.Date;
import java.util.Collection;
import de.berlin.fu.data.dao.PropertyDao;
import de.berlin.fu.data.dto.Property;
import de.berlin.fu.data.exceptions.PropertyDaoException;
import de.berlin.fu.data.factory.PropertyDaoFactory;

public class PropertyDaoSample
{
	/**
	 * Method 'main'
	 * 
	 * @param arg
	 * @throws Exception
	 */
	public static void main(String[] arg) throws Exception
	{
		// Uncomment one of the lines below to test the generated code
		
		// findAll();
		// findByPropertyType(0);
		// findBySensor("");
		// findWhereIdPropertyEquals(0);
		// findWherePropertytypeIdpropertytypeEquals(0);
		// findWhereSensorIdsensorEquals("");
		// findWhereValueEquals(0);
		// findWhereTimestampEquals(null);
	}

	/**
	 * Method 'findAll'
	 * 
	 */
	public static void findAll()
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findAll();
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findByPropertyType'
	 * 
	 * @param propertytypeIdpropertytype
	 */
	public static void findByPropertyType(int propertytypeIdpropertytype)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findByPropertyType(propertytypeIdpropertytype);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findBySensor'
	 * 
	 * @param sensorIdsensor
	 */
	public static void findBySensor(String sensorIdsensor)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findBySensor(sensorIdsensor);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereIdPropertyEquals'
	 * 
	 * @param idProperty
	 */
	public static void findWhereIdPropertyEquals(int idProperty)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findWhereIdPropertyEquals(idProperty);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWherePropertytypeIdpropertytypeEquals'
	 * 
	 * @param propertytypeIdpropertytype
	 */
	public static void findWherePropertytypeIdpropertytypeEquals(int propertytypeIdpropertytype)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findWherePropertytypeIdpropertytypeEquals(propertytypeIdpropertytype);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereSensorIdsensorEquals'
	 * 
	 * @param sensorIdsensor
	 */
	public static void findWhereSensorIdsensorEquals(String sensorIdsensor)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findWhereSensorIdsensorEquals(sensorIdsensor);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereValueEquals'
	 * 
	 * @param value
	 */
	public static void findWhereValueEquals(double value)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findWhereValueEquals(value);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'findWhereTimestampEquals'
	 * 
	 * @param timestamp
	 */
	public static void findWhereTimestampEquals(Date timestamp)
	{
		try {
			PropertyDao _dao = getPropertyDao();
			Property _result[] = _dao.findWhereTimestampEquals(timestamp);
			for (int i=0; i<_result.length; i++ ) {
				display( _result[i] );
			}
		
		}
		catch (Exception _e) {
			_e.printStackTrace();
		}
		
	}

	/**
	 * Method 'getPropertyDao'
	 * 
	 * @return PropertyDao
	 */
	public static PropertyDao getPropertyDao()
	{
		return PropertyDaoFactory.create();
	}

	/**
	 * Method 'display'
	 * 
	 * @param dto
	 */
	public static void display(Property dto)
	{
		StringBuffer buf = new StringBuffer();
		buf.append( dto.getIdProperty() );
		buf.append( ", " );
		buf.append( dto.getPropertytypeIdpropertytype() );
		buf.append( ", " );
		buf.append( dto.getSensorIdsensor() );
		buf.append( ", " );
		buf.append( dto.getValue() );
		buf.append( ", " );
		buf.append( dto.getTimestamp() );
		System.out.println( buf.toString() );
	}

}
